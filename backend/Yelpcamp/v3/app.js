var express		= require("express") ;
var app 		= express() ; 
var request 	= require("request") ;

var bodyParser  = require("body-parser") ;

var Campground  = require ( "./models/campgrounds" ) ; 
// can name it anything. 

var mongoose    = require("mongoose") ;

var seedDB 		= require("./seeds") ;  // ./ to look for this file in the current directory. 
 

mongoose.connect( "mongodb://localhost:27017/yelp_camp", { useNewParser: true } ) ; 
// checks if yelp_camp database is already created or not. 

app.use( bodyParser.urlencoded( { extended: true } ) ) ;

app.set("view engine", "ejs") ;


// create a new database yelp_camp. 
// mongod is running on 27017 port number.  
// While working with a database, check whether data is already present or not. 

seedDB() ; // we want to export a function.



app.get("/" , function(req, res) {  // landing page. 
res.render("landing") ; 
}) ; 


// INDEX ROUTE
app.get("/campgrounds" , function(req, res) { // displays all our campgrounds. 
	// Now we will get the campgrounds from the server. 

	Campground.find({} , function (err, allCampgrounds) {
		if ( err ) {
			console.log(err); 
		} else {
			res.render( "index", { campgrounds: allCampgrounds } ) ;	
			// Full campgrounds array is sent back by the server in campgrounds.
		}
	}); 
	
	//
	
} ) ;

// CREATE ROUTE
app.post("/campgrounds", function(req, res) { // Create a new campground                      
	// get data from form and add to campgrounds array
	// redirect back to campgrounds page.
	var campname = req.body.campname ; 
	var campimage = req.body.image ;
	var cdescription = req.body.description ; // rhs wala description is the value of name attribute of input tag in new.ejs
	
	Campground.create (
		{
		name: campname,
		image: campimage, 
		description: cdescription
		}, function(err, campground){
		if (err) {
			console.log(err) ;
		} else {
			res.redirect("/campgrounds") ; // By default a GET request. Change name of campgrounds.ejs to index.js
		} // render() takes file names while redirect takes name of routes. 
	}
	
	) ; 
	

});   

// NEW ROUTE: Displays form to submit data for a new campground. 
app.get( "/campgrounds/new", function(req, res) {
	res.render("new") ; 
}) ; 

/*
We have to have 2 routes to send a POST request. One to show the form and one
to handle the POST request from submitting that form. 
*/

// SHOW ROUTE: 
/* Have a button on every campground's image by which 
 we can view extra information about that campground. 
For example: On reddit, for a post we just see the title, we get more information on clicking that link.

*/

app.get("/campgrounds/:id" , function(req, res) { // this has to after /campgrounds/new route. 
	
	// /campgrounds/:id is saying anything after campgrounds. find the campground with provided id.
	// render show template with that campground. 
	
	// capture the id of the campground here and display the campground. 
	
	Campground.findById(req.params.id).populate("comments").exec ( function ( err, foundCampground ) {
		if ( err ){
			console.log(err) ;  // pass the same callback in exec.
		} else {
			res.render("show", { campground: foundCampground } ) ; 
		}
	});
	
	// Populate the comments field on that campground. With exec we execute the query
	// that we made. Now we access campground.comments field in our "show.ejs" file. 
	
	// For campgrounds we will use ids generated by mongo. 
	// mongoose provides a findById() function. 
	
	
});


app.listen(3000, function() {
	console.log("Yelpcamp server started") ; 
}) ;

/*
Create new campgrounds
Setup new campground POST route
Add in body-parser
Setup route to show form
Add basic unstyled form

Here we will have a form on a separate route. 

When we restart the server, any of the campgrounds we add get deleted.

Version:2 of campgrounds 
Install and configure mongoose
Setup campground model
Use campground model inside of our routes. 

*/





